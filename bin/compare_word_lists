#! /usr/bin/env bash
# Copyright (c) 2022 Michael D. Adams

#set -xv

exit_status_fail=1
exit_status_usage=2
exit_status_mismatch=3

panic()
{
	echo "ERROR: $@"
	exit "$exit_status_fail"
}

perform_cleanup()
{
	if [ -n "$tmp_dir" -a -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir" || \
		  echo "warning: cannot remove temporary directory $tmp_dir"
	fi
}

usage()
{
	echo "bad usage: $@"
	exit "$exit_status_usage"
}

cleanup=1
tmp_dir_template="${TMPDIR:-/tmp}/compare_word_lists-XXXXXXXX"
verbose=1

while getopts Cq option; do
	case "$option" in
	C)
		cleanup=0;;
	q)
		verbose=0;;
	*)
		usage;;
	esac
done
shift $(($OPTIND - 1))

if [ $# -ne 2 ]; then
	usage
fi

reference_file="$1"
other_file="$2"

tmp_dir=$(mktemp -d "$tmp_dir_template") || \
  panic "cannot create temporary directory"
if [ "$cleanup" -ne 0 ]; then
	trap perform_cleanup EXIT
fi

tmp_reference_file="$tmp_dir/reference"
tmp_other_file="$tmp_dir/other"
tmp_output_file="$tmp_dir/output"

sort -u < "$reference_file" > "$tmp_reference_file" || \
  panic "sort failed"
sort -u < "$other_file" > "$tmp_other_file" || \
  panic "sort failed"

comm -13 "$tmp_reference_file" "$tmp_other_file" > "$tmp_output_file" || \
  panic "comm failed"

empty=1
[ -s "$tmp_output_file" ] && empty=0

if [ "$verbose" -ge 1 ]; then
	if [ "$empty" -eq 0 ]; then
		echo "============================================================"
		cat "$tmp_output_file"
		echo "============================================================"
	fi
fi

if [ "$empty" -eq 0 ]; then
	echo "ERROR: missing words detected"
	exit "$exit_status_mismatch"
fi
